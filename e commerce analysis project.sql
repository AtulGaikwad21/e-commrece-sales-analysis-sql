create database ecommerce_analysis_project;
use ecommerce_analysis_project;

create table orders(order_id text,customer_id text,order_status text, order_purchase_timestamp text,order_approved_at text ,
order_delivered_carrier_date text , order_delivered_customer_date text , order_estimated_delivery_date text );

SELECT * FROM ecommerce_analysis_project.orders;

CREATE TABLE customers (
    customer_id VARCHAR(255),
    customer_unique_id VARCHAR(255),
    customer_zip_code_prefix INT,
    customer_city VARCHAR(255),
    customer_state VARCHAR(2)
);

SELECT * FROM ecommerce_analysis_project.customers;

CREATE TABLE products (
    product_id VARCHAR(255),
    product_category VARCHAR(255),
    product_name_length FLOAT,
    product_description_length FLOAT,
    product_photos_qty FLOAT,
    product_weight_g FLOAT,
    product_length_cm FLOAT,
    product_height_cm FLOAT,
    product_width_cm FLOAT
);

SELECT * FROM ecommerce_analysis_project.products;

CREATE TABLE sellers (
    seller_id VARCHAR(255) NOT NULL,
    seller_zip_code_prefix INT NOT NULL,
    seller_city VARCHAR(255) NOT NULL,
    seller_state VARCHAR(2) NOT NULL
);

SELECT * FROM ecommerce_analysis_project.sellers;


CREATE TABLE order_items (
    order_id VARCHAR(255),
    order_item_id INT,
    product_id VARCHAR(255),
    seller_id VARCHAR(255),
    shipping_limit_date DATETIME,
    price DECIMAL(10, 2),
    freight_value DECIMAL(10, 2)
);

SELECT * FROM ecommerce_analysis_project.order_items;

CREATE TABLE payments (
    order_id VARCHAR(255),
    payment_sequential INT,
    payment_type VARCHAR(255),
    payment_installments INT,
    payment_value DECIMAL(10, 2)
);
SELECT * FROM ecommerce_analysis_project.payments;


# BASIC QUESTION :

#1.List all unique cities where customers are located:

SELECT DISTINCT customer_city AS "Unique City" FROM customers;

#2.Count the number of orders placed in 2017.
SELECT COUNT(*) AS orders_2017
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2017;

#3.Find the total sales per category: 

SELECT products.product_category AS category_name, SUM(payments.payment_value) AS total_sales
FROM payments
JOIN orders ON payments.order_id = orders.order_id
JOIN order_items ON orders.order_id = order_items.order_id
JOIN products ON order_items.product_id = products.product_id
GROUP BY products.product_category;


#4. Calculate the percentage of orders paid in installments.

SELECT 
    COUNT(DISTINCT CASE WHEN payment_installments > 1 THEN order_id END) * 100.0 / COUNT(DISTINCT order_id) AS installment_percentage
FROM 
    payments;


#5.Count the number of customers from each state.

SELECT 
    customers.customer_state, 
    COUNT(*) AS customer_count
FROM ecommerce_analysis_project.customers
GROUP BY customers.customer_state;

#Intermediate Problems

# 1.Calculate the number of orders per month in 2018.
SELECT 
    MONTH(orders.order_purchase_timestamp) AS month, 
    COUNT(*) AS order_count
FROM ecommerce_analysis_project.orders
WHERE YEAR(orders.order_purchase_timestamp) = 2018
GROUP BY MONTH(orders.order_purchase_timestamp);

# 2.Find the average number of products per order, grouped by customer city.

SELECT 
    customers.customer_city, 
    ROUND(AVG(order_items.order_item_id), 2) AS avg_products
FROM ecommerce_analysis_project.order_items
JOIN ecommerce_analysis_project.orders 
    ON order_items.order_id = orders.order_id
JOIN ecommerce_analysis_project.customers 
    ON orders.customer_id = customers.customer_id
GROUP BY customers.customer_city;


#3. Calculate the percentage of total revenue contributed by each product category.

SELECT 
    products.product_category, 
    ROUND((SUM(order_items.price) * 100.0) / (SELECT SUM(price) FROM ecommerce_analysis_project.order_items), 2) AS revenue_percentage
FROM ecommerce_analysis_project.order_items
JOIN ecommerce_analysis_project.products 
    ON order_items.product_id = products.product_id
GROUP BY products.product_category;

#4.Identify the correlation between product price and the number of times a product has been purchased.

SELECT 
    products.product_category, 
    AVG(order_items.price) AS price,  
    COUNT(order_items.product_id) AS order_count
FROM 
    order_items
JOIN 
    products ON order_items.product_id = products.product_id
GROUP BY 
    products.product_category
    ORDER BY 
    order_count DESC;

#5. Calculate the total revenue generated by each seller and rank them by revenue.

SELECT 
    order_items.seller_id,
    SUM(payments.payment_value) AS total_revenue,
    RANK() OVER (ORDER BY SUM(payments.payment_value) DESC) AS seller_rank
FROM 
    order_items
JOIN 
    payments ON order_items.order_id = payments.order_id
GROUP BY 
    order_items.seller_id
ORDER BY 
    total_revenue DESC;

# ADVANCED PROBLEMS .  

#1. Calculate the moving average of order values for each customer over their order history.

SELECT 
    customer_orders.customer_id, 
    customer_orders.order_id, 
    AVG(customer_orders.order_value) OVER (PARTITION BY customer_orders.customer_id ORDER BY customer_orders.order_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg_order_value
FROM (
    SELECT 
        orders.customer_id, 
        orders.order_id, 
        SUM(order_items.price) AS order_value, 
        orders.order_purchase_timestamp AS order_date
    FROM ecommerce_analysis_project.orders
    JOIN ecommerce_analysis_project.order_items 
        ON orders.order_id = order_items.order_id
    GROUP BY orders.customer_id, orders.order_id, orders.order_purchase_timestamp
) customer_orders;


#2. Calculate the cumulative sales per month for each year.

SELECT 
    YEAR(orders.order_purchase_timestamp) AS year,
    MONTH(orders.order_purchase_timestamp) AS month,
    SUM(payments.payment_value) AS total_sales,
    SUM(SUM(payments.payment_value)) OVER (PARTITION BY YEAR(orders.order_purchase_timestamp) ORDER BY MONTH(orders.order_purchase_timestamp)) AS cumulative_sales
FROM 
    orders
JOIN 
    payments ON orders.order_id = payments.order_id
GROUP BY 
    YEAR(orders.order_purchase_timestamp), MONTH(orders.order_purchase_timestamp)
ORDER BY 
    year, month;



# 3. Calculate the year-over-year growth rate of total sales.
    
    SELECT 
    YEAR(orders.order_purchase_timestamp) AS year, 
    SUM(order_items.price) AS total_sales, 
    LAG(SUM(order_items.price)) OVER (ORDER BY YEAR(orders.order_purchase_timestamp)) AS previous_year_sales, 
    ((SUM(order_items.price) - LAG(SUM(order_items.price)) OVER (ORDER BY YEAR(orders.order_purchase_timestamp))) / LAG(SUM(order_items.price)) OVER (ORDER BY YEAR(orders.order_purchase_timestamp)) * 100) AS yoy_growth_rate
FROM ecommerce_analysis_project.orders
JOIN ecommerce_analysis_project.order_items 
    ON orders.order_id = order_items.order_id
GROUP BY YEAR(orders.order_purchase_timestamp);

#4.. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.

SELECT 
    COUNT(DISTINCT retained.customer_id) AS retained_customers,
    COUNT(DISTINCT first_purchase.customer_id) AS total_first_time_customers,
    (COUNT(DISTINCT retained.customer_id) / COUNT(DISTINCT first_purchase.customer_id)) * 100 AS retention_rate
FROM 
    (SELECT 
        customer_id, 
        MIN(order_purchase_timestamp) AS first_purchase_date
    FROM orders
    GROUP BY customer_id) AS first_purchase
LEFT JOIN orders AS retained 
    ON first_purchase.customer_id = retained.customer_id 
    AND retained.order_purchase_timestamp > first_purchase.first_purchase_date
    AND DATEDIFF(retained.order_purchase_timestamp, first_purchase.first_purchase_date) <= 180;
    
    
    



#5. Identify the top 3 customers who spent the most money in each year.

SELECT 
    yearly_customer_spending.year, 
    yearly_customer_spending.customer_id, 
    yearly_customer_spending.total_spent
FROM (
    SELECT 
        YEAR(orders.order_purchase_timestamp) AS year, 
        orders.customer_id, 
        SUM(order_items.price) AS total_spent, 
        RANK() OVER (PARTITION BY YEAR(orders.order_purchase_timestamp) ORDER BY SUM(order_items.price) DESC) AS `rank`
    FROM ecommerce_analysis_project.orders
    JOIN ecommerce_analysis_project.order_items 
        ON orders.order_id = order_items.order_id
    GROUP BY YEAR(orders.order_purchase_timestamp), orders.customer_id
) yearly_customer_spending
WHERE yearly_customer_spending.`rank` <= 3;


















